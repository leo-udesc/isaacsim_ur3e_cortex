#usda 1.0
(
    "Robot Codeless schema"
    subLayers = [
    @usdGeom/schema.usda@,
    ]


)

over "GLOBAL"(
    customData= {
        string libraryName = "RobotSchema"
        string libraryPath = "./"
        string libraryPrefix = "RobotSchema"
        bool skipCodeGeneration = true
    }
)
{

}
class "RobotAPI"
(
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
    }
)
{   
    string isaac:description= ""
    string isaac:namespace = ""
    rel isaac:physics:robotLinks (
        doc = """
        Sorted list of bodies, Reference points or Robot assemblies ( all bodies from the robot are inserted) to be listed in the robot kinematics tree. 
        The order defines how the robot will be reported both in communication protocols as in the body poses 
        tensor.
        """
    )
    rel isaac:physics:robotJoints (
        doc = """
        Sorted list of joints to be reported in the robot structure. This list can contain either direct references to Robot Joints, or to a Robot composition - which inserts all sub-components into the list.
        """
    )
}

class "LinkAPI"
(
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
    }
)
{
    string isaac:nameOverride = ""
}


class "ReferencePointAPI"
(
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
    }
)
{
    string isaac:Description = ""
    uniform token isaac:forwardAxis = "X" (
        allowedTokens = ["X", "Y", "Z"]
    )
}



class "JointAPI"
(
inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
    }
)
{
    int isaac:physics:Rot_X:DoFOffset = 0
    int isaac:physics:Rot_Y:DoFOffset = 1
    int isaac:physics:Rot_Z:DoFOffset = 2
    int isaac:physics:Tr_X:DoFOffset = 3
    int isaac:physics:Tr_Y:DoFOffset = 4
    int isaac:physics:Tr_Z:DoFOffset = 5
    string isaac:NameOverride = ""
    float[] isaac:physics:AccelerationLimit = [-1,-1,-1,-1,-1,-1]
    float[] isaac:physics:JerkLimit = [-1, -1 ,-1 ,-1 ,-1 ,-1 ,-1]
    bool[] isaac:actuator = [0,0,0,0,0,0]
}

#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacArticulationState.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_isaacsim_core_nodes_IsaacArticulationState" (
        docs="""Articulated robot state. The node takes either joint names or joint indices, and outputs the joint positions and velocities, as well as the measured joint efforts, forces, and torques."""
    )
    {
        token node:type = "isaacsim.core.nodes.IsaacArticulationState"
        int node:typeVersion = 1

        # 5 attributes
        custom uint inputs:execIn (
            docs="""The input execution"""
        )
        custom int[] inputs:jointIndices = [] (
            docs="""Queried joint indices, use either Joint Names or Joint Indices, if neither is given, default to all joints"""
        )
        custom token[] inputs:jointNames = [] (
            docs="""Queried joint names, use either Joint Names or Joint Indices, if neither is given, default to all joints"""
        )
        custom string inputs:robotPath = "" (
            docs="""Path to the robot articulation root. If this is populated, targetPrim is ignored."""
        )
        custom rel inputs:targetPrim (
            docs="""The target robot prim with robot articulation root. Ensure robotPath is empty for this to be considered."""
        )

        # 6 attributes
        custom token[] outputs:jointNames (
            docs="""Joint names"""
        )
        custom double[] outputs:jointPositions (
            docs="""Joint positions
            Units:
                linear (m)
                angular (rad)"""
        )
        custom double[] outputs:jointVelocities (
            docs="""Joint velocities
            Units:
                linear (m/s)
                angular (rad/s)"""
        )
        custom double[] outputs:measuredJointEfforts (
            docs="""Measured joint efforts
            Force Units:  
                linear (kg*m/s^2) i.e. a force
                angular (kg*m^2/s^2) i.e. a torque
            Acceleration Units:
                linear (m/s^2), i.e. a linear acceleration
                angular (rad/s^2) i.e. an angular acceleration"""
        )
        custom double3[] outputs:measuredJointForces (
            docs="""Measured joint reaction forces
            Force Units:  
                linear (kg*m/s^2) i.e. a force
                angular (kg*m^2/s^2) i.e. a torque
            Acceleration Units:
                linear (m/s^2), i.e. a linear acceleration
                angular (rad/s^2) i.e. an angular acceleration"""
        )
        custom double3[] outputs:measuredJointTorques (
            docs="""Measured joint reaction torques
            Force Units:  
                linear (kg*m/s^2) i.e. a force
                angular (kg*m^2/s^2) i.e. a torque
            Acceleration Units:
                linear (m/s^2), i.e. a linear acceleration
                angular (rad/s^2) i.e. an angular acceleration"""
        )
    }
}

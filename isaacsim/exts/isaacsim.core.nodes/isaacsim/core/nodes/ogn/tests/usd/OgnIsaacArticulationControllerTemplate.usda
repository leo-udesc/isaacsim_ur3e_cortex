#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacArticulationController.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_isaacsim_core_nodes_IsaacArticulationController" (
        docs="""Controller for articulated robots. The controller takes either joint names or joint indices, and move them by the given position/velocity/effort commands. Note angular units are expressed in radians while angles in USD are expressed in degrees and will be adjusted accordingly by the articulation controller."""
    )
    {
        token node:type = "isaacsim.core.nodes.IsaacArticulationController"
        int node:typeVersion = 1

        # 8 attributes
        custom double[] inputs:effortCommand = [] (
            docs="""effort commands
            Force Units:  
                linear (kg*m/s^2) i.e. a force
                angular (kg*m^2/s^2) i.e. a torque
            Acceleration Units:
                linear (m/s^2), i.e. a linear acceleration
                angular (rad/s^2) i.e. an angular acceleration"""
        )
        custom uint inputs:execIn (
            docs="""The input execution"""
        )
        custom int[] inputs:jointIndices = [] (
            docs="""commanded joint indices, use either Joint Names or Joint Indices, if neither is given, default to all joints"""
        )
        custom token[] inputs:jointNames = [] (
            docs="""commanded joint names, use either Joint Names or Joint Indices, if neither is given, default to all joints"""
        )
        custom double[] inputs:positionCommand = [] (
            docs="""position commands
            Units:
                linear (m)
                angular (rad)"""
        )
        custom string inputs:robotPath = "" (
            docs="""path to the robot articulation root. If this is populated, targetPrim is ignored."""
        )
        custom rel inputs:targetPrim (
            docs="""The target robot prim with robot articulation root. Ensure robotPath is empty for this to be considered."""
        )
        custom double[] inputs:velocityCommand = [] (
            docs="""velocity commands
            Units:
                linear (m/s)
                angular (rad/s)"""
        )
    }
}
